// Imports react and necessary libraries
import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import './App.css'; // Import the CSS file

const BASE_URL = window.location.origin.includes('localhost')
    ? 'http://localhost:8000'  // If running locally, assume backend is on localhost:8000
    : 'http://52.15.75.24:8000';  // Replace with your production backend URLconsole.log("API Base URL:", BASE_URL);

const App = () => {
    // BACKEND
    const dataFetched = useRef(false);              // Data fetch reference; true if summary/textbook data has been fetched. False otherwise.
    
    // USER Q/A
    const [answer, setAnswer] = useState('');       // Answer from the user (Textbox content)
    const [questions, setQuestions] = useState([]); // Questions generated by the LLM
    const [mcq, setMcq] = useState([]);
    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // IDX of the currently shown question
    const [answers, setAnswers] = useState([]);     // Answer set from the user

    // DOCUMENT CONTENT
    const [summary, setSummary] = useState('');     // Summary of the document content
    const [document, setDocument] = useState('');  // Document content
    const [score, setScore] = useState(0)

    // NEW CODE: State for the settings menus
    const [selectedSections, setSelectedSections] = useState([]);
    const [selectedQuizTypes, setSelectedQuizTypes] = useState([]);

    // NEW CODE: Handle changes for textbook sections checkboxes
    const handleSectionChange = (event) => {
        const { value, checked } = event.target;
        if (checked) {
            setSelectedSections(prev => [...prev, value]);
        } else {
            setSelectedSections(prev => prev.filter(section => section !== value));
        }
    };
    
    // NEW CODE: Handle changes for quiz types checkboxes
    const handleQuizTypeChange = (event) => {
        const { value, checked } = event.target;
        if (checked) {
            setSelectedQuizTypes(prev => [...prev, value]);
        } else {
            setSelectedQuizTypes(prev => prev.filter(quizType => quizType !== value));
        }
    };
    

    useEffect(() => {
        const fetchDocument = async () => {
            try {
                const res = await axios.get(`${BASE_URL}/retrieve-document`);
                setDocument(res.data.document)
            } catch (error) {
                console.error("Error fetching document:", error.response || error)
            }
        };
        fetchDocument();
    });

    // Fetch summary and questions on page load
    useEffect(() => {
        const fetchSummaryAndQuestions = async () => {
            try {
                const res = await axios.get(`${BASE_URL}/generate-summary-and-questions`);
                if (!dataFetched.current) { // Check to make sure summary and questions are blank
                    setSummary(res.data.summary);
                    // setQuestions(res.data.questions);
                    // setMcq(res.data.mcq);
                    dataFetched.current = true; // Mark data as fetched
                }
            } catch (error) {
                console.error("Error fetching summary and questions:", error);
            }
        };
        fetchSummaryAndQuestions();
    }, []);

    //NEW CODE:
    const fetchQuestions = async () => {
        try {
            const res = await axios.get(`${BASE_URL}/generate-questions`);
            let questionSet = [];
            if (selectedQuizTypes.includes("short answer"))
                questionSet = questionSet.concat(res.data.questions);
            if (selectedQuizTypes.includes("mcq"))
                questionSet = questionSet.concat(res.data.mcq);
            if (selectedQuizTypes.includes("true/false"))
                questionSet = questionSet.concat(res.data.tf);

            questionSet.sort( () => .5 - Math.random() );

            for (let i = 0; i < questionSet.length; i++) {
                if (Array.isArray(questionSet[i])){
                    questionSet[i] = questionSet[i].filter(x => x)
                }
            }

            setQuestions(questionSet);

            console.log("SELECTED TYPES:");
            console.log(selectedQuizTypes);
            console.log("Question Set:");
            console.log(questionSet);

        } catch (error) {
            console.error("Error fetching summary and questions:", error);
        }
    };
    
    // Function to handle user submissions
    const handleSubmit = async (e) => {
        e.preventDefault(); // Prevent page reload on submission
        try {
            // Get the current question's answer from the input field (the user's response)
            const userAnswer = answer;
            
            let question_string = questions[currentQuestionIndex];
            if (Array.isArray(questions[currentQuestionIndex])){
                question_string = questions[currentQuestionIndex].join("$%^");
                console.log(question_string);
            }

            // Make a POST request to the backend with the question and user's answer
            const res = await axios.post(`${BASE_URL}/query`, { 
                question: question_string, 
                user_answer: userAnswer
            });
        
            // Store the user's response to the current question in the answers state
            setAnswers([
                ...answers,
                { question: questions[currentQuestionIndex], user_answer: userAnswer, response: res.data.response, score: res.data.score }
            ]);
    
            setAnswer(''); // Clear the input field for the next question
            setScore(Number(res.data.score) + Number(score))
            setCurrentQuestionIndex(currentQuestionIndex + 1); // Move to the next question
        } catch (error) {
            console.error("Error querying LLM:", error); // Log any errors
        }
    };
    

    return (
        <div className="app-container">
            <h1 className="app-title">TutorAI: Textbook Learning Assistant</h1>

            {/* NEW CODE: Settings Menu */}
            <div className="settings-container">
                <div className="section-settings">
                    <h3>Select Textbook Sections</h3>
                    <label>
                        <input 
                            type="checkbox" 
                            value="ch 6.1" 
                            checked={selectedSections.includes("ch 6.1")} 
                            onChange={handleSectionChange} 
                        />
                        ch 6.1 What Is Learning?
                    </label>
                    <br />
                    <label>
                        <input 
                            type="checkbox" 
                            value="ch 6.2" 
                            checked={selectedSections.includes("ch 6.2")} 
                            onChange={handleSectionChange} 
                        />
                        ch 6.2 Classical Conditioning
                    </label>
                    <br />
                    <label>
                        <input 
                            type="checkbox" 
                            value="ch 6.3" 
                            checked={selectedSections.includes("ch 6.3")} 
                            onChange={handleSectionChange} 
                        />
                        ch 6.3 Operant Conditioning
                    </label>
                    <br />
                    <label>
                        <input 
                            type="checkbox" 
                            value="ch 6.4" 
                            checked={selectedSections.includes("ch 6.4")} 
                            onChange={handleSectionChange} 
                        />
                        ch 6.4 Observational Learning (Modeling)
                    </label>
                </div>
                <div className="quiz-settings">
                    <h3>Select Quiz Types</h3>
                    <label>
                        <input 
                            type="checkbox" 
                            value="mcq" 
                            checked={selectedQuizTypes.includes("mcq")} 
                            onChange={handleQuizTypeChange} 
                        />
                        MCQ
                    </label>
                    <br />
                    <label>
                        <input 
                            type="checkbox" 
                            value="true/false" 
                            checked={selectedQuizTypes.includes("true/false")} 
                            onChange={handleQuizTypeChange} 
                        />
                        True/False
                    </label>
                    <br />
                    <label>
                        <input 
                            type="checkbox" 
                            value="short answer" 
                            checked={selectedQuizTypes.includes("short answer")} 
                            onChange={handleQuizTypeChange} 
                        />
                        Short Answer
                    </label>
                </div>
            </div>

            <button onClick={fetchQuestions} className="load-questions-button">Load Questions</button>
            {/* End of NEW CODE: Settings Menu */}

            {/* Textbook Content Section */}
            <div className="textbook-container">
                <h2>Textbook Content:</h2>
                <p className="textbook-content">{document}</p>
            </div>

            {/* Summary Section */}
            <div className="summary-container">
                <h2>Textbook Summary:</h2>
                <p className="summary-content">{summary}</p>
            </div>

            {/* Chat Section */}
            <div className="chat-container">
                <h3>Questions and Responses:</h3>
                {questions.slice(0, currentQuestionIndex + 1).map((q, index) => (
                    <div key={index} className="chat-bubble-container">
                        <div className="chat-bubble user-bubble">
                            <strong>Question {index + 1}:</strong> {Array.isArray(q) ? q[0] : q}

                            {/* Render answer choices if the question is an array */}
                            {Array.isArray(q) && (
                                <div className="chat-bubble options">
                                    {q.slice(1, q.length - 1).map((option, optIndex) => (
                                        <div key={optIndex} className="chat-bubble option">{option}</div>
                                    ))}
                                </div>
                            )}
                        </div>

                        {answers[index] && (
                            <div className="chat-bubble user-answer">
                                <strong>Your Answer:</strong> {answers[index].user_answer}
                            </div>
                        )}
                        {answers[index] && (
                            <div className="chat-bubble ai-response">
                                <strong>Response:</strong> {answers[index].response}
                                <br></br>
                                <strong>Score:</strong> {answers[index].score}
                            </div>
                        )}
                    </div>
                ))}
            </div>

            {/* Current Question Section */}

            {currentQuestionIndex > 0 &&
            <div className="current-question">
                <h3>Current Score:</h3>
                <p>{score}/{currentQuestionIndex * 10}</p>
            </div>
            }

            {/* Input Form Section */}
            <form className="input-form" onSubmit={handleSubmit}>
                <input
                    type="text"
                    value={answer}
                    onChange={(e) => setAnswer(e.target.value)}
                    placeholder="Your Answer"
                />
                <button type="submit">Submit</button>
            </form>

            {/* Completion Message */}
            {currentQuestionIndex >= questions.length && (
                <p className="completion-message">All questions answered!</p>
            )}
        </div>
    );
};

export default App;
